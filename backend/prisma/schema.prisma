// EXACT copy of KASY_MVP Prisma schema
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

enum MessageRole {
  USER
  ASSISTANT
}

// Chat messages and artifacts - Main storage for MVP
model Message {
  id            String      @id @default(cuid())
  groupId       String
  authorId      String?     // Telegram user ID, null for bot messages
  role          MessageRole
  text          String
  artifacts     Json?       // Receipt JSON, split preview, payment profiles, etc.
  correlationId String?     // Links to events, used for idempotency
  createdAt     DateTime    @default(now())
  
  @@index([groupId])
  @@index([correlationId])
  @@map("messages")
}

// Gentle Collector™ - Payment reminders
model Reminder {
  id                String   @id @default(cuid())
  groupId           String   // Where the expense happened
  groupName         String   // Human-readable group name
  settlementId      String   // Reference to settlement
  debtorUserId      String   // Who owes money (receives DM)
  debtorUserName    String
  creditorUserId    String   // Who is owed
  creditorUserName  String
  amountCents       Int
  
  // Reminder state
  nextReminderAt    DateTime
  reminderCount     Int      @default(0) // 0, 1, 2 (for T+24h, T+48h, T+7d)
  status            String   @default("pending") // 'pending', 'snoozed', 'completed', 'opted_out'
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastReminderSentAt DateTime?
  completedAt       DateTime?
  
  @@index([groupId])
  @@index([debtorUserId, status])
  @@index([nextReminderAt, status])
  @@map("reminders")
}

// User preferences for reminders
model UserPreference {
  id              String   @id @default(cuid())
  userId          String   @unique
  
  // Reminder preferences
  enableReminders Boolean  @default(true)
  quietHoursStart Int      @default(22) // 22:00
  quietHoursEnd   Int      @default(8)  // 08:00
  timezone        String   @default("UTC")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("user_preferences")
}

// Social Gamification - Badges (Monthly Reset System)
model Badge {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  badgeType String   // 'table_hero', 'pay_it_forward', 'even_steven'
  awardedAt DateTime @default(now())
  month     Int      // 1-12 (for monthly reset)
  year      Int      // e.g., 2025 (for monthly reset)
  metadata  Json?    // e.g., { "settlementId": "...", "completionTimeHours": 120 }
  
  @@index([userId])
  @@index([groupId])
  @@index([userId, month, year]) // For monthly queries
  @@map("badges")
}

// User stats for badge calculations
model UserStats {
  id                  String    @id @default(cuid())
  userId              String    @unique
  paymentsOnTime      Int       @default(0)
  consecutiveQuickPays Int      @default(0)
  totalSettled        Int       @default(0) // Total amount settled in cents
  lastPaymentAt       DateTime?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@map("user_stats")
}

// Payment profiles for Venmo/PayPal handles
model PaymentProfile {
  userId    String   @id // Telegram user ID
  userName  String   // Display name
  venmo     String?  // Venmo handle (e.g., "@alice")
  paypal    String?  // PayPal handle (e.g., "alice@paypal.com")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payment_profiles")
}

// Username → User ID mapping (for gray mention resolution)
model UserMapping {
  id            String   @id @default(cuid())
  username      String   @unique // Telegram username (lowercase, no @)
  userId        String   // Real Telegram user ID
  displayName   String   // User's display name
  lastSeenAt    DateTime @default(now())
  
  @@index([username])
  @@map("user_mappings")
}
